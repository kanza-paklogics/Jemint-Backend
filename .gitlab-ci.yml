stages:
  - deploy

deploy-dev:
  stage: deploy

  before_script:
    - "apk add --no-cache openssh"
    - "mkdir -p ~/.ssh"
    - 'eval "$(ssh-agent -s)"'
    - "echo \"$private_key_dev\" | tr -d '\\r' | ssh-add -"
    - "chmod 700 ~/.ssh"
    - ssh-keyscan -H "$hostname_dev" >> ~/.ssh/known_hosts

  image: alpine
  only:
    - staging
  script:
    - pwd
    - ssh -o StrictHostKeyChecking=no ubuntu@"$hostname_dev"
    - ssh -o StrictHostKeyChecking=no ubuntu@"$hostname_dev" set -f
    - ssh -o StrictHostKeyChecking=no ubuntu@"$hostname_dev" sudo rm -rf /var/www/testapi.thegemmintclub.com/test-backend
    - ssh -o StrictHostKeyChecking=no ubuntu@"$hostname_dev" "cd /var/www/testapi.thegemmintclub.com/ && sudo git clone https://gitlab+deploy-token-1526186:Ap934stqpzaBXARQrXXc@gitlab.com/Codistan/Jemint/backend.git test-backend"
    - ssh -o StrictHostKeyChecking=no ubuntu@"$hostname_dev" sudo chmod -R 777 /var/www/testapi.thegemmintclub.com/test-backend/
    - ssh -o StrictHostKeyChecking=no ubuntu@"$hostname_dev" sudo chown -R ubuntu:ubuntu /var/www/testapi.thegemmintclub.com/test-backend/
    - ssh -o StrictHostKeyChecking=no ubuntu@"$hostname_dev" "cd /var/www/testapi.thegemmintclub.com/test-backend/ && sudo git stash && sudo git checkout staging"

    - echo "$ENV_FILE_DEV" | ssh -o StrictHostKeyChecking=no ubuntu@"$hostname_dev" 'cat > /var/www/testapi.thegemmintclub.com/test-backend/.env'

    - ssh -o StrictHostKeyChecking=no ubuntu@"$hostname_dev" "cd /var/www/testapi.thegemmintclub.com/test-backend/ && cat .env && ls -la"
   
    - ssh -o StrictHostKeyChecking=no ubuntu@"$hostname_dev" "cd /var/www/testapi.thegemmintclub.com/test-backend/ && sudo npm install --legacy-peer-deps --save domutils"
    - ssh -o StrictHostKeyChecking=no ubuntu@"$hostname_dev" "cd /var/www/testapi.thegemmintclub.com/test-backend/ && pm2 restart TEST-API || pm2 start \"npm start\" --name TEST-API"

# stages:
#   - build
#   - deploy

# variables:
#   DOCKER_TLS_CERTDIR: "/certs"

# build:
#   stage: build
#   image: docker:20.10.16
#   services:
#     - docker:20.10.16-dind
#   script:
#     - pwd
#     - ls
#     - |
#       if [[ "$CI_COMMIT_REF_NAME" == "main" ]]; then
#         DOCKER_IMAGE_PREFIX="jemint-backend-prod"
#         echo "$ENV_FILE_PROD" > .env
#       else
#         DOCKER_IMAGE_PREFIX="jemint-backend-dev"
#         echo "$ENV_FILE_DEV" > .env
#       fi
#     - DOCKER_IMAGE_TAG="$DOCKER_IMAGE_PREFIX-$CI_COMMIT_REF_NAME"
#     - ls
#     - cat .env
#     - echo "$docker_key" | docker login --username "$docker_username" --password-stdin
#     - docker build -t $DOCKER_IMAGE_TAG .
#     - docker tag $DOCKER_IMAGE_TAG codistan/$DOCKER_IMAGE_PREFIX:$DOCKER_IMAGE_TAG
#     - docker push codistan/$DOCKER_IMAGE_PREFIX:$DOCKER_IMAGE_TAG
#   only:
#     - main
#     - staging

# deploy:
#   stage: deploy
#   before_script:
#     - apt update
#     - touch .env
#     - mkdir ~/.ssh
#     - eval $(ssh-agent -s)
#     - |
#       if [[ "$CI_COMMIT_REF_NAME" == "main" ]]; then
#         hostname="$hostname_prod"
#         user="$user"
#         docker_key="$docker_key_prod"
#         private_key="$private_key_prod"
#         DOCKER_IMAGE_PREFIX="jemint-backend-prod"
#       else
#         hostname="$hostname_dev"
#         user="$user"
#         docker_key="$docker_key_dev"
#         private_key="$private_key_dev"
#         DOCKER_IMAGE_PREFIX="jemint-backend-dev"
#       fi
#     - echo "$private_key" | tr -d '\r' | ssh-add -
#     - chmod 700 /root/.ssh
#     - ssh-keyscan -H "$hostname" >> ~/.ssh/known_hosts
#     - DOCKER_IMAGE_TAG="$DOCKER_IMAGE_PREFIX-$CI_COMMIT_REF_NAME"
#   script:
#     - ssh -o StrictHostKeyChecking=no $user@$hostname ls
#   #  - ssh -o StrictHostKeyChecking=no $user@$hostname sudo docker login -u $docker_username -p $docker_key
#     - ssh -o StrictHostKeyChecking=no $user@$hostname sudo docker image rm -f codistan/$DOCKER_IMAGE_PREFIX:$DOCKER_IMAGE_TAG || true
#     - ssh -o StrictHostKeyChecking=no $user@$hostname sudo docker rm -f $DOCKER_IMAGE_PREFIX || true
#     - ssh -o StrictHostKeyChecking=no $user@$hostname sudo docker pull codistan/$DOCKER_IMAGE_PREFIX:$DOCKER_IMAGE_TAG
#     - |
#       if [[ "$CI_COMMIT_REF_NAME" == "main" ]]; then
#         ssh -o StrictHostKeyChecking=no $user@$hostname sudo docker run --name $DOCKER_IMAGE_PREFIX -d -it -p 4000:4000 codistan/jemint-backend-prod:$DOCKER_IMAGE_TAG
#       else
#         ssh -o StrictHostKeyChecking=no $user@$hostname sudo docker run --name $DOCKER_IMAGE_PREFIX -d -it -p 3002:3002 codistan/jemint-backend-dev:$DOCKER_IMAGE_TAG
#       fi
#   only:
#     - main
#     - staging

